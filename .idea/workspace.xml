<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="b409524c-8667-4684-be72-0a22047a43d5" name="Changes" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/connectors/ApplicationConnector.scala" beforeDir="false" afterPath="$PROJECT_DIR$/app/connectors/ApplicationConnector.scala" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/controllers/ApplicationController.scala" beforeDir="false" afterPath="$PROJECT_DIR$/app/controllers/ApplicationController.scala" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/models/DeletedReturn.scala" beforeDir="false" afterPath="$PROJECT_DIR$/app/models/DeletedReturn.scala" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/services/ApplicationService.scala" beforeDir="false" afterPath="$PROJECT_DIR$/app/services/ApplicationService.scala" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/target/scala-2.13/classes/connectors/ApplicationConnector.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/scala-2.13/classes/connectors/ApplicationConnector.class" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/target/scala-2.13/test-classes/connectors/WireMockAppConnectorSpec$$anon$1.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/scala-2.13/test-classes/connectors/WireMockAppConnectorSpec$$anon$1.class" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/target/scala-2.13/test-classes/connectors/WireMockAppConnectorSpec$Test.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/scala-2.13/test-classes/connectors/WireMockAppConnectorSpec$Test.class" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/target/scala-2.13/test-classes/connectors/WireMockAppConnectorSpec.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/scala-2.13/test-classes/connectors/WireMockAppConnectorSpec.class" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/target/scala-2.13/test-classes/helpers/WireMockMethods$DELETE$.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/scala-2.13/test-classes/helpers/WireMockMethods$DELETE$.class" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/target/scala-2.13/test-classes/helpers/WireMockMethods.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/scala-2.13/test-classes/helpers/WireMockMethods.class" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/target/scala-2.13/test-classes/stubs/ApplicationConnectorStub$.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/scala-2.13/test-classes/stubs/ApplicationConnectorStub$.class" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/target/scala-2.13/test-classes/stubs/ApplicationConnectorStub.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/scala-2.13/test-classes/stubs/ApplicationConnectorStub.class" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/test/connectors/WireMockAppConnectorSpec.scala" beforeDir="false" afterPath="$PROJECT_DIR$/test/connectors/WireMockAppConnectorSpec.scala" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/test/controllers/ApplicationControllerSpec.scala" beforeDir="false" afterPath="$PROJECT_DIR$/test/controllers/ApplicationControllerSpec.scala" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/test/controllers/UnitApplicationControllerSpec.scala" beforeDir="false" afterPath="$PROJECT_DIR$/test/controllers/UnitApplicationControllerSpec.scala" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/test/helpers/WireMockMethods.scala" beforeDir="false" afterPath="$PROJECT_DIR$/test/helpers/WireMockMethods.scala" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/test/service/ApplicationServiceUnitSpec.scala" beforeDir="false" afterPath="$PROJECT_DIR$/test/service/ApplicationServiceUnitSpec.scala" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/test/stubs/ApplicationConnectorStub.scala" beforeDir="false" afterPath="$PROJECT_DIR$/test/stubs/ApplicationConnectorStub.scala" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="CodeStyleSettingsInfer">
    <option name="done" value="true" />
  </component>
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Scala Class" />
        <option value="HTML File" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectCodeStyleSettingsMigration">
    <option name="version" value="2" />
  </component>
  <component name="ProjectId" id="2BKpMCyLN2NE1twoyRgkEGEvVSU" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;DefaultHtmlFileTemplate&quot;: &quot;HTML File&quot;,
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
    &quot;last_opened_file_path&quot;: &quot;/Users/robyn.garlington/Documents/scalaTraining/assignments/gHub-example/gitHub-ex/github-example&quot;,
    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;
  }
}</component>
  <component name="RunManager" selected="ScalaTest.WireMockAppConnectorSpec">
    <configuration name="WireMockAppConnectorSpec" type="ScalaTestRunConfiguration" factoryName="ScalaTest" temporary="true" nameIsGenerated="true" show_console_on_std_err="false" show_console_on_std_out="false">
      <module name="gitHub-ex" />
      <option name="allowRunningInParallel" value="false" />
      <option name="projectPathOnTarget" />
      <option name="selectedOptions">
        <list />
      </option>
      <option name="testKind" value="Class" />
      <option name="testClassPath" value="connectors.WireMockAppConnectorSpec" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="WireMockAppConnectorSpec.ApplicationConnector .downloadTar() should get a error from the github api when trying to get readme of a repository that does not exist" type="ScalaTestRunConfiguration" factoryName="ScalaTest" temporary="true" nameIsGenerated="true" show_console_on_std_err="false" show_console_on_std_out="false">
      <module name="gitHub-ex" />
      <option name="allowRunningInParallel" value="false" />
      <option name="projectPathOnTarget" />
      <option name="selectedOptions">
        <list />
      </option>
      <option name="testKind" value="Test name" />
      <option name="testClassPath" value="connectors.WireMockAppConnectorSpec" />
      <option name="testName" value="ApplicationConnector .downloadTar() should get a error from the github api when trying to get readme of a repository that does not exist" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="WireMockAppConnectorSpec.ApplicationConnector .downloadTar() should get repository readme from the github api" type="ScalaTestRunConfiguration" factoryName="ScalaTest" temporary="true" nameIsGenerated="true" show_console_on_std_err="false" show_console_on_std_out="false">
      <module name="gitHub-ex" />
      <option name="allowRunningInParallel" value="false" />
      <option name="projectPathOnTarget" />
      <option name="selectedOptions">
        <list />
      </option>
      <option name="testKind" value="Test name" />
      <option name="testClassPath" value="connectors.WireMockAppConnectorSpec" />
      <option name="testName" value="ApplicationConnector .downloadTar() should get repository readme from the github api" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="WireMockAppConnectorSpec.ApplicationConnector .downloadTar() should get repository readme from the github api&#10;ApplicationConnector .downloadTar() should get a error from the github api when trying to get readme of a repository that does not exist" type="ScalaTestRunConfiguration" factoryName="ScalaTest" temporary="true" nameIsGenerated="true" show_console_on_std_err="false" show_console_on_std_out="false">
      <module name="gitHub-ex" />
      <option name="allowRunningInParallel" value="false" />
      <option name="projectPathOnTarget" />
      <option name="selectedOptions">
        <list />
      </option>
      <option name="testKind" value="Test name" />
      <option name="testClassPath" value="connectors.WireMockAppConnectorSpec" />
      <option name="testName" value="ApplicationConnector .downloadTar() should get repository readme from the github api&#10;ApplicationConnector .downloadTar() should get a error from the github api when trying to get readme of a repository that does not exist" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="WireMockAppConnectorSpec.ApplicationConnector .downloadZip() should download zip from the github api&#10;ApplicationConnector .downloadZip() should get a error from the github api when trying to download zip" type="ScalaTestRunConfiguration" factoryName="ScalaTest" temporary="true" nameIsGenerated="true" show_console_on_std_err="false" show_console_on_std_out="false">
      <module name="gitHub-ex" />
      <option name="allowRunningInParallel" value="false" />
      <option name="projectPathOnTarget" />
      <option name="selectedOptions">
        <list />
      </option>
      <option name="testKind" value="Test name" />
      <option name="testClassPath" value="connectors.WireMockAppConnectorSpec" />
      <option name="testName" value="ApplicationConnector .downloadZip() should download zip from the github api&#10;ApplicationConnector .downloadZip() should get a error from the github api when trying to download zip" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="ScalaTest.WireMockAppConnectorSpec" />
        <item itemvalue="ScalaTest.WireMockAppConnectorSpec.ApplicationConnector .downloadZip() should download zip from the github api&#10;ApplicationConnector .downloadZip() should get a error from the github api when trying to download zip" />
        <item itemvalue="ScalaTest.WireMockAppConnectorSpec.ApplicationConnector .downloadTar() should get a error from the github api when trying to get readme of a repository that does not exist" />
        <item itemvalue="ScalaTest.WireMockAppConnectorSpec.ApplicationConnector .downloadTar() should get repository readme from the github api" />
        <item itemvalue="ScalaTest.WireMockAppConnectorSpec.ApplicationConnector .downloadTar() should get repository readme from the github api&#10;ApplicationConnector .downloadTar() should get a error from the github api when trying to get readme of a repository that does not exist" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="b409524c-8667-4684-be72-0a22047a43d5" name="Changes" comment="" />
      <created>1656664580931</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1656664580931</updated>
    </task>
    <servers />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>