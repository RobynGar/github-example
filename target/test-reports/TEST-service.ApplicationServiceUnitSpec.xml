<?xml version='1.0' encoding='UTF-8'?>
<testsuite hostname="Robyns-MBP.broadband" name="service.ApplicationServiceUnitSpec" tests="36" errors="0" failures="1" skipped="0" time="0.047" timestamp="2022-08-12T12:35:47">
                     <properties>
      <property name="jline.esc.timeout" value="0"/><property name="jna.platform.library.path" value="/usr/lib:/usr/lib"/><property name="java.runtime.name" value="OpenJDK Runtime Environment"/><property name="sun.boot.library.path" value="/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/jre/lib"/><property name="java.vm.version" value="25.292-b10"/><property name="gopherProxySet" value="false"/><property name="java.vm.vendor" value="AdoptOpenJDK"/><property name="java.vendor.url" value="https://adoptopenjdk.net/"/><property name="path.separator" value=":"/><property name="jna.loaded" value="true"/><property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/><property name="file.encoding.pkg" value="sun.io"/><property name="user.country" value="GB"/><property name="sun.java.launcher" value="SUN_STANDARD"/><property name="sun.os.patch.level" value="unknown"/><property name="jna.nosys" value="true"/><property name="java.vm.specification.name" value="Java Virtual Machine Specification"/><property name="user.dir" value="/Users/robyn.garlington/Documents/scalaTraining/assignments/gHub-example/gitHub-ex/github-example"/><property name="java.runtime.version" value="1.8.0_292-b10"/><property name="java.awt.graphicsenv" value="sun.awt.CGraphicsEnvironment"/><property name="java.endorsed.dirs" value="/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/jre/lib/endorsed"/><property name="os.arch" value="x86_64"/><property name="java.io.tmpdir" value="/var/folders/th/vqj_zcr979l7cnkdqz84zgjw0000gn/T/"/><property name="line.separator" value="
"/><property name="java.vm.specification.vendor" value="Oracle Corporation"/><property name="log4j.ignoreTCL" value="true"/><property name="os.name" value="Mac OS X"/><property name="sun.jnu.encoding" value="UTF-8"/><property name="jnidispatch.path" value="/Users/robyn.garlington/Library/Caches/JNA/temp/jna4020404263398831427.tmp"/><property name="java.library.path" value="/Users/robyn.garlington/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/><property name="java.specification.name" value="Java Platform API Specification"/><property name="java.class.version" value="52.0"/><property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/><property name="os.version" value="10.16"/><property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/><property name="swoval.tmpdir" value="/Users/robyn.garlington/.sbt/1.0"/><property name="user.home" value="/Users/robyn.garlington"/><property name="user.timezone" value="Europe/London"/><property name="java.awt.printerjob" value="sun.lwawt.macosx.CPrinterJob"/><property name="file.encoding" value="UTF-8"/><property name="java.specification.version" value="1.8"/><property name="java.class.path" value="/opt/homebrew/Cellar/sbt/1.6.2/libexec/bin/sbt-launch.jar"/><property name="user.name" value="robyn.garlington"/><property name="jline.shutdownhook" value="false"/><property name="java.vm.specification.version" value="1.8"/><property name="sun.java.command" value="/opt/homebrew/Cellar/sbt/1.6.2/libexec/bin/sbt-launch.jar"/><property name="java.home" value="/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/jre"/><property name="sun.arch.data.model" value="64"/><property name="user.language" value="en"/><property name="java.specification.vendor" value="Oracle Corporation"/><property name="awt.toolkit" value="sun.lwawt.macosx.LWCToolkit"/><property name="java.vm.info" value="mixed mode"/><property name="java.version" value="1.8.0_292"/><property name="java.ext.dirs" value="/Users/robyn.garlington/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/><property name="sun.boot.class.path" value="/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/jre/classes"/><property name="java.vendor" value="AdoptOpenJDK"/><property name="file.separator" value="/"/><property name="java.vendor.url.bug" value="https://github.com/AdoptOpenJDK/openjdk-support/issues"/><property name="sun.io.unicode.encoding" value="UnicodeBig"/><property name="sun.cpu.endian" value="little"/><property name="sbt.script" value="/opt/homebrew/Cellar/sbt/1.6.2/libexec/bin/sbt"/><property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/><property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/><property name="sun.cpu.isalist" value=""/>
    </properties>
                     <testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .index should return when there are no users" time="0.006">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .index should return sequence of users when there are users" time="0.001">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService() .create() should should add user to mongodb" time="0.002">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService() .create() should could not validate user so should not add to mongodb or call create" time="0.002">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService() .create() should unable to create a user as with validate user format but login already exists" time="0.001">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .read() should return a user by login/username" time="0.0">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .read() should does not return a user as incorrect login/username" time="0.001">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .update() should return an updated user" time="0.001">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .update() should unable to updated a user as cannot validate user format" time="0.0">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .update() should unable to updated a user as with validate user format but non-existing login" time="0.001">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .delete() should return a string upon deleting a user by login" time="0.001">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .delete() should return a error upon unsuccessfully trying to delete a user by login" time="0.001">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .getUser() should return a user by login for github api" time="0.001">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .getUser() should unable to return a user from api, incorrect login" time="0.001">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .getUsersRepo() should return a user repositories names in list" time="0.0">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .getUsersRepo() should unable to return a user's repositories names from api, incorrect login" time="0.0">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .getUsersRepoInfo() should return a users information by login for github api" time="0.001">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .getUsersRepoInfo() should unable to return a user information from api, incorrect login" time="0.0">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .getRepoContent() should return a user repositories content by login for github api" time="0.0">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .getRepoContent() should unable to return a user repositories content from api, incorrect login" time="0.001">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .getDirContent() should return a user's repository folder contents by login for github api" time="0.0">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .getDirContent() should unable to return a user's repository folder content from api, incorrect login" time="0.001">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .getFileContent() should return a user's repository folder contents by login for github api" time="0.001">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .getFileContent() should unable to return a user's repository folder content from api, incorrect login" time="0.0">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .addApiUser() should add a user from github api to mongodb" time="0.003">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .addApiUser() should unable to return a user from api, incorrect login" time="0.004">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .createFile() should create file on github api in a repository" time="0.001">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .createFile() should unable to create file in a repository on the github api as unable to validate return from api" time="0.0">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .createFile() should unable to create file in a repository on the github api as unable to validate create file request" time="0.001">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .updateFile() should update file on github api in a repository" time="0.002">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .updateFile() should unable to update file in a repository on the github api as unable to find file" time="0.002">
                                                 <failure message="org.scalatest.exceptions.TestFailedException: Left(BadAPIResponse(400,could not find file to update)) was not equal to Left(BadAPIResponse(400,could not update file))" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: org.scalatest.exceptions.TestFailedException: Left(BadAPIResponse(400,could not find file to update)) was not equal to Left(BadAPIResponse(400,could not update file))
	at org.scalatest.matchers.MatchersHelper$.indicateFailure(MatchersHelper.scala:402)
	at org.scalatest.matchers.should.Matchers$AnyShouldWrapper.shouldBe(Matchers.scala:7018)
	at service.ApplicationServiceUnitSpec.$anonfun$new$111(ApplicationServiceUnitSpec.scala:408)
	at org.scalatest.concurrent.Futures$.whenReadyImpl(Futures.scala:621)
	at org.scalatest.concurrent.Futures.whenReady(Futures.scala:609)
	at org.scalatest.concurrent.Futures.whenReady$(Futures.scala:608)
	at service.ApplicationServiceUnitSpec.whenReady(ApplicationServiceUnitSpec.scala:14)
	at service.ApplicationServiceUnitSpec.$anonfun$new$108(ApplicationServiceUnitSpec.scala:407)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.wordspec.AnyWordSpecLike$$anon$3.apply(AnyWordSpecLike.scala:1077)
	at org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
	at org.scalatest.TestSuite.withFixture$(TestSuite.scala:195)
	at service.ApplicationServiceUnitSpec.org$scalamock$scalatest$AbstractMockFactory$$super$withFixture(ApplicationServiceUnitSpec.scala:14)
	at org.scalamock.scalatest.AbstractMockFactory.$anonfun$withFixture$1(AbstractMockFactory.scala:35)
	at org.scalamock.MockFactoryBase.withExpectations(MockFactoryBase.scala:41)
	at org.scalamock.MockFactoryBase.withExpectations$(MockFactoryBase.scala:33)
	at service.ApplicationServiceUnitSpec.withExpectations(ApplicationServiceUnitSpec.scala:14)
	at org.scalamock.scalatest.AbstractMockFactory.withFixture(AbstractMockFactory.scala:34)
	at org.scalamock.scalatest.AbstractMockFactory.withFixture$(AbstractMockFactory.scala:31)
	at service.ApplicationServiceUnitSpec.withFixture(ApplicationServiceUnitSpec.scala:14)
	at org.scalatest.wordspec.AnyWordSpecLike.invokeWithFixture$1(AnyWordSpecLike.scala:1075)
	at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$runTest$1(AnyWordSpecLike.scala:1087)
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
	at org.scalatest.wordspec.AnyWordSpecLike.runTest(AnyWordSpecLike.scala:1087)
	at org.scalatest.wordspec.AnyWordSpecLike.runTest$(AnyWordSpecLike.scala:1069)
	at service.ApplicationServiceUnitSpec.org$scalatest$BeforeAndAfterEach$$super$runTest(ApplicationServiceUnitSpec.scala:14)
	at org.scalatest.BeforeAndAfterEach.runTest(BeforeAndAfterEach.scala:234)
	at org.scalatest.BeforeAndAfterEach.runTest$(BeforeAndAfterEach.scala:227)
	at service.ApplicationServiceUnitSpec.runTest(ApplicationServiceUnitSpec.scala:14)
	at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$runTests$1(AnyWordSpecLike.scala:1146)
	at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:413)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
	at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:390)
	at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:427)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
	at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:396)
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:475)
	at org.scalatest.wordspec.AnyWordSpecLike.runTests(AnyWordSpecLike.scala:1146)
	at org.scalatest.wordspec.AnyWordSpecLike.runTests$(AnyWordSpecLike.scala:1145)
	at org.scalatest.wordspec.AnyWordSpec.runTests(AnyWordSpec.scala:1879)
	at org.scalatest.Suite.run(Suite.scala:1112)
	at org.scalatest.Suite.run$(Suite.scala:1094)
	at org.scalatest.wordspec.AnyWordSpec.org$scalatest$wordspec$AnyWordSpecLike$$super$run(AnyWordSpec.scala:1879)
	at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$run$1(AnyWordSpecLike.scala:1191)
	at org.scalatest.SuperEngine.runImpl(Engine.scala:535)
	at org.scalatest.wordspec.AnyWordSpecLike.run(AnyWordSpecLike.scala:1191)
	at org.scalatest.wordspec.AnyWordSpecLike.run$(AnyWordSpecLike.scala:1189)
	at service.ApplicationServiceUnitSpec.org$scalatestplus$play$BaseOneServerPerSuite$$super$run(ApplicationServiceUnitSpec.scala:14)
	at org.scalatestplus.play.BaseOneServerPerSuite.run(BaseOneServerPerSuite.scala:163)
	at org.scalatestplus.play.BaseOneServerPerSuite.run$(BaseOneServerPerSuite.scala:159)
	at service.ApplicationServiceUnitSpec.org$scalatest$BeforeAndAfterAll$$super$run(ApplicationServiceUnitSpec.scala:14)
	at org.scalatest.BeforeAndAfterAll.liftedTree1$1(BeforeAndAfterAll.scala:213)
	at org.scalatest.BeforeAndAfterAll.run(BeforeAndAfterAll.scala:210)
	at org.scalatest.BeforeAndAfterAll.run$(BeforeAndAfterAll.scala:208)
	at service.ApplicationServiceUnitSpec.run(ApplicationServiceUnitSpec.scala:14)
	at org.scalatest.tools.Framework.org$scalatest$tools$Framework$$runSuite(Framework.scala:318)
	at org.scalatest.tools.Framework$ScalaTestTask.execute(Framework.scala:513)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
</failure>
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .updateFile() should unable to update file in a repository on the github api as unable to validate update request" time="0.001">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .updateFile() should unable to update file in a repository on the github api as unable to validate api's return" time="0.002">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .deleteFile() should delete file from github api repository" time="0.006">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .deleteFile() should unable to delete file from github api repository as repository does not exist" time="0.001">
                                                 
                                               </testcase><testcase classname="service.ApplicationServiceUnitSpec" name="ApplicationService .deleteFile() should unable to delete file from github api repository" time="0.001">
                                                 
                                               </testcase>
                     <system-out><![CDATA[]]></system-out>
                     <system-err><![CDATA[]]></system-err>
                   </testsuite>